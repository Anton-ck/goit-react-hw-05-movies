{"version":3,"file":"static/js/387.51b7dac5.chunk.js","mappings":"mTAEMA,EAAM,mCACNC,EAAW,+BAEJC,EAAiB,mCAAG,oGACFC,EAAAA,EAAAA,IAAA,UACnBF,EADmB,qCACkBD,IAC5CI,OAAM,SAAAC,GACL,OAAO,IAAIC,MAAMD,EAClB,IAL4B,cACzBE,EADyB,yBAMxBA,GANwB,2CAAH,qDASjBC,EAAe,mCAAG,WAAMC,GAAN,uFACFN,EAAAA,EAAAA,IAAA,UACtBF,EADsB,kBACJQ,EADI,oBACeT,IAFb,cACvBU,EADuB,yBAKtBA,GALsB,2CAAH,sDAQfC,EAAa,mCAAG,WAAMF,GAAN,uFACHN,EAAAA,EAAAA,IAAA,UACdF,EADc,kBACIQ,EADJ,4BAC+BT,IAF5B,cACrBY,EADqB,yBAIpBA,GAJoB,2CAAH,sDAObC,EAAgB,mCAAG,WAAMJ,GAAN,uFACHN,EAAAA,EAAAA,IAAA,UACtBF,EADsB,kBACJQ,EADI,4BACuBT,IAFpB,cACxBc,EADwB,yBAKvBA,GALuB,2CAAH,sDAQhBC,EAAS,mCAAG,WAAMC,GAAN,uFACFb,EAAAA,EAAAA,IAAA,UAChBF,EADgB,+BACee,EADf,oBACgChB,IAF9B,cACjBiB,EADiB,yBAKhBA,GALgB,2CAAH,qD,wKCnCTC,EAAoBC,EAAAA,EAAAA,IAAH,2CAIjBC,EAAaD,EAAAA,EAAAA,GAAH,mLAUVE,EAAiBF,EAAAA,EAAAA,GAAH,4VAmBdG,EAAgBH,EAAAA,EAAAA,IAAH,gF,mBCgD1B,EAxEa,WACX,IAAQV,GAAYc,EAAAA,EAAAA,MAAZd,QACR,GAAkCe,EAAAA,EAAAA,UAAS,IAA3C,eAAOZ,EAAP,KAAkBa,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOnB,EAAP,KAAcuB,EAAd,MAEAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGF,GAAa,GAFhB,UAI2BhB,EAAAA,EAAAA,IAAcF,GAJzC,OAISG,EAJT,OAKGa,EAAab,EAAUkB,MACvBC,QAAQC,IAAIpB,EAAUkB,MAEa,IAA/BlB,EAAUkB,KAAKG,KAAKC,QACtBN,EAAS,8CATd,kDAYGG,QAAQC,IAAI,KAAMG,SAZrB,yBAcGR,GAAa,GAdhB,4EAAD,EAiBD,GAAE,CAAClB,IACJ,IAAQwB,EAASrB,EAATqB,KACR,OACE,SAACf,EAAD,UACGQ,GACC,SAACU,EAAA,EAAD,IACE/B,GACA,SAACgB,EAAD,CAAgBgB,MAAO,CACrBC,MAAO,MACPC,SAAU,OACVC,WAAY,MACZC,UAAW,QAJb,SAMKpC,KAEP,SAACe,EAAD,UACGa,GACCA,EAAKS,KAAI,SAAAC,GAAQ,OACf,UAACtB,EAAD,YACE,SAACC,EAAD,CACEsB,IACED,EAASE,aACL,mCACAF,EAASE,aACT,sCAENC,IAAI,MAEN,yBAAG,WACM,4BAAM,IAAEH,EAASI,YAE1B,yBAAG,cAED,4BAAM,IAAEJ,EAASK,kBAfAL,EAASM,GADf,OA6B5B,C","sources":["API/API.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '292fb79ad255ff04db0087dc349cbd4a';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const trendingMovies = await axios\n    .get(`${BASE_URL}/trending/all/day?api_key=${KEY}`)\n    .catch(error => {\n      return new Error(error);\n    });\n  return trendingMovies;\n};\n\nexport const getMovieDetails = async movieId => {\n  const movieDetails = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n\n  return movieDetails;\n};\n\nexport const getMoviesCast = async movieId => {\n  const movieCast = await axios\n    .get(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n  \n  return movieCast;\n};\n\nexport const getMoviesReviews = async movieId => {\n  const movieReviews = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n\n  return movieReviews;\n};\n\nexport const getMovies = async query => {\n  const movies = await axios.get(\n    `${BASE_URL}/search/movie?query=${query}&api_key=${KEY}`\n  );\n\n  return movies;\n};","import styled from '@emotion/styled';\n\nexport const ActorsCardWrapper = styled.div`\n  display: block;\n`;\n\nexport const ActorsCard = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 40px;\n  margin-top: 30px;\n  list-style: none;\n  /* outline: 1px solid red; */\n`;\n\nexport const ActorsCardItem = styled.li`\n  /* width: calc((100% - 260px) / 3);\n  margin-bottom: 30px;\n  margin-right: 30px;\n  /* padding: 25px; */\n  /* margin: 0 auto; */\n  text-align: center;\n  list-style: none;\n\n  /* &:nth-child(3n) {\n    margin-left: 0px;\n    margin-right: 0;\n  }\n  &:last-child {\n    width: 100%;\n    margin-right: auto;\n  } */\n`;\n\nexport const ActorsCardImg = styled.img`\n  display: block;\n  margin: 0 auto;\n  padding: 10px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMoviesCast } from 'API/API';\nimport {\n  ActorsCardWrapper,\n  ActorsCard,\n  ActorsCardItem,\n  ActorsCardImg,\n} from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n\n        const movieCast = await getMoviesCast(movieId);\n        setMovieCast(movieCast.data);\n        console.log(movieCast.data);\n\n        if (movieCast.data.cast.length === 0) { \n          setError('Sorry, we do not found cast for this movie');\n        }\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n  const { cast } = movieCast;\n  return (\n    <ActorsCardWrapper>\n      {isLoading ? (\n        <Loader></Loader>\n      ) : error ? (\n          <ActorsCardItem style={{\n            color: \"red\",\n            fontSize: \"20px\",\n            fontWeight: \"700\",\n            marginTop: \"50px\",\n\n          }}>{ error}</ActorsCardItem>\n      ) : (\n        <ActorsCard>\n          {cast &&\n            cast.map(castItem => (\n              <ActorsCardItem key={castItem.id}>\n                <ActorsCardImg\n                  src={\n                    castItem.profile_path\n                      ? 'https://image.tmdb.org/t/p/w300/' +\n                        castItem.profile_path\n                      : 'https://via.placeholder.com/300x450'\n                  }\n                  alt=\"\"\n                />\n                <p>\n                  Actor: <span> {castItem.name}</span>\n                </p>\n                <p>\n                  Character:\n                  <span> {castItem.character}</span>\n                </p>\n              </ActorsCardItem>\n            ))}\n        </ActorsCard>\n      )}\n    </ActorsCardWrapper>\n  );\n\n\n\n\n    \n};\n\nexport default Cast;\n"],"names":["KEY","BASE_URL","getTrendingMovies","axios","catch","error","Error","trendingMovies","getMovieDetails","movieId","movieDetails","getMoviesCast","movieCast","getMoviesReviews","movieReviews","getMovies","query","movies","ActorsCardWrapper","styled","ActorsCard","ActorsCardItem","ActorsCardImg","useParams","useState","setMovieCast","isLoading","setIsLoading","setError","useEffect","data","console","log","cast","length","message","Loader","style","color","fontSize","fontWeight","marginTop","map","castItem","src","profile_path","alt","name","character","id"],"sourceRoot":""}