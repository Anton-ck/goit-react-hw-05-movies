{"version":3,"file":"static/js/779.058960d5.chunk.js","mappings":"mTAEMA,EAAM,mCACNC,EAAW,+BAEJC,EAAiB,mCAAG,oGACFC,EAAAA,EAAAA,IAAA,UACnBF,EADmB,qCACkBD,IAC5CI,OAAM,SAAAC,GACL,OAAO,IAAIC,MAAMD,EAClB,IAL4B,cACzBE,EADyB,yBAMxBA,GANwB,2CAAH,qDASjBC,EAAe,mCAAG,WAAMC,GAAN,uFACFN,EAAAA,EAAAA,IAAA,UACtBF,EADsB,kBACJQ,EADI,oBACeT,IAFb,cACvBU,EADuB,yBAKtBA,GALsB,2CAAH,sDAQfC,EAAa,mCAAG,WAAMF,GAAN,uFACHN,EAAAA,EAAAA,IAAA,UACdF,EADc,kBACIQ,EADJ,4BAC+BT,IAF5B,cACrBY,EADqB,yBAIpBA,GAJoB,2CAAH,sDAObC,EAAgB,mCAAG,WAAMJ,GAAN,uFACHN,EAAAA,EAAAA,IAAA,UACtBF,EADsB,kBACJQ,EADI,4BACuBT,IAFpB,cACxBc,EADwB,yBAKvBA,GALuB,2CAAH,sDAQhBC,EAAS,mCAAG,WAAMC,GAAN,uFACFb,EAAAA,EAAAA,IAAA,UAChBF,EADgB,+BACee,EADf,oBACgChB,IAF9B,cACjBiB,EADiB,yBAKhBA,GALgB,2CAAH,qD,0KCnCTC,EAAqBC,EAAAA,EAAAA,IAAH,2CAGlBC,EAAaD,EAAAA,EAAAA,GAAH,oIAQVE,EAAiBF,EAAAA,EAAAA,GAAH,8CAMdG,EAAeH,EAAAA,EAAAA,EAAH,2FAOZI,EAASJ,EAAAA,EAAAA,EAAH,wI,mBC+CnB,EA7DqB,WACnB,IAAQV,GAAYe,EAAAA,EAAAA,MAAZf,QACR,GAAwCgB,EAAAA,EAAAA,UAAS,IAAjD,eAAOX,EAAP,KAAqBY,EAArB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOpB,EAAP,KAAcwB,EAAd,MAEAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGF,GAAa,GAFhB,UAI8Bf,EAAAA,EAAAA,IAAiBJ,GAJ/C,OAISK,EAJT,OAKGY,EAAgBZ,EAAaiB,MAC7BC,QAAQC,IAAInB,EAAaiB,KAAKG,SAEW,IAArCpB,EAAaiB,KAAKG,QAAQC,QAC5BN,EAAS,gDATd,kDAYGG,QAAQC,IAAI,KAAMG,SAZrB,yBAcGR,GAAa,GAdhB,4EAAD,EAiBD,GAAE,CAACnB,IACJ,IAAQyB,EAAYpB,EAAZoB,QACR,OACE,SAAChB,EAAD,UACGS,GACC,SAACU,EAAA,EAAD,IACEhC,GACF,cACEiC,MAAO,CACLC,MAAO,MACPC,SAAU,OACVC,WAAY,MACZC,UAAW,QALf,SAQGrC,KAGH,SAACe,EAAD,UACGc,GACCA,EAAQS,KAAI,SAAAC,GAAM,OAChB,UAACvB,EAAD,YACE,UAACC,EAAD,WAAc,YACJ,4BAAM,IAAEsB,EAAOC,cAEzB,UAACtB,EAAD,WAAQ,WAEN,4BAAM,IAAEqB,EAAOE,gBANEF,EAAOG,GADZ,OAe7B,C","sources":["API/API.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '292fb79ad255ff04db0087dc349cbd4a';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const trendingMovies = await axios\n    .get(`${BASE_URL}/trending/all/day?api_key=${KEY}`)\n    .catch(error => {\n      return new Error(error);\n    });\n  return trendingMovies;\n};\n\nexport const getMovieDetails = async movieId => {\n  const movieDetails = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n\n  return movieDetails;\n};\n\nexport const getMoviesCast = async movieId => {\n  const movieCast = await axios\n    .get(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n  \n  return movieCast;\n};\n\nexport const getMoviesReviews = async movieId => {\n  const movieReviews = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n\n  return movieReviews;\n};\n\nexport const getMovies = async query => {\n  const movies = await axios.get(\n    `${BASE_URL}/search/movie?query=${query}&api_key=${KEY}`\n  );\n\n  return movies;\n};","import styled from \"@emotion/styled\";\n\nexport const ReviewsCardWrapper = styled.div`\n  display: block;\n`;\nexport const ReviewCard = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 30px;\n  list-style: none;\n`;\n\nexport const ReviewCardItem = styled.li`\n  padding: 15px;\n\n\n`;\n\nexport const ReviewAuthor = styled.p`\n  font-weight: 700;\n  & > span {\n    color: rebeccapurple;\n  }\n`;\n\nexport const Review = styled.p`\n  font-weight: 700;\n  & > span {\n    font-weight: 400;\n    font-style: oblique;\n    line-height: 1.5;\n  }\n`;","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMoviesReviews } from 'API/API';\nimport {\n  ReviewsCardWrapper,\n  ReviewCard,\n  ReviewCardItem,\n  ReviewAuthor,\n  Review,\n} from './Reviews.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieReviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n\n        const movieReviews = await getMoviesReviews(movieId);\n        setMovieReviews(movieReviews.data);\n        console.log(movieReviews.data.results);\n\n        if (movieReviews.data.results.length === 0) {\n          setError('Sorry, we do not found review for this movie');\n        }\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n  const { results } = movieReviews;\n  return (\n    <ReviewsCardWrapper>\n      {isLoading ? (\n        <Loader></Loader>\n      ) : error ? (\n        <p\n          style={{\n            color: 'red',\n            fontSize: '20px',\n            fontWeight: '700',\n            marginTop: '50px',\n          }}\n        >\n          {error}\n        </p>\n      ) : (\n        <ReviewCard>\n          {results &&\n            results.map(result => (\n              <ReviewCardItem key={result.id}>\n                <ReviewAuthor>\n                  Author: <span> {result.author}</span>\n                </ReviewAuthor>\n                <Review>\n                  Review:\n                  <span> {result.content}</span>\n                </Review>\n              </ReviewCardItem>\n            ))}\n        </ReviewCard>\n      )}\n    </ReviewsCardWrapper>\n  );\n};\n\nexport default MovieReviews;\n"],"names":["KEY","BASE_URL","getTrendingMovies","axios","catch","error","Error","trendingMovies","getMovieDetails","movieId","movieDetails","getMoviesCast","movieCast","getMoviesReviews","movieReviews","getMovies","query","movies","ReviewsCardWrapper","styled","ReviewCard","ReviewCardItem","ReviewAuthor","Review","useParams","useState","setMovieReviews","isLoading","setIsLoading","setError","useEffect","data","console","log","results","length","message","Loader","style","color","fontSize","fontWeight","marginTop","map","result","author","content","id"],"sourceRoot":""}